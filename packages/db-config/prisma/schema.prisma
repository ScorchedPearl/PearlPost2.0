generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  name            String
  email           String  @unique
  password        String?
  profileImageURL String?
  likes           Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts            Post[]
  comments         Comment[]
  replies          Reply[]
  recommendedUsers User[]    @relation("UserRecommendations")
  recommendedBy    User?     @relation("UserRecommendations", fields: [recommendedById], references: [id])
  recommendedById  String?
  followers        Follows[] @relation("followers")
  following        Follows[] @relation("following")
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  imageURL  String
  tags      Tag[]     @relation("PostTags")
  published Boolean   @default(false)
  likes     Like[]
  comments  Comment[]

  author   User   @relation(fields: [authorId], references: [id] )
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])

  @@id([userId, postId], name: "unique_user_post_like")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  date      DateTime
  public    Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  tags      Tag[]    @relation("DiaryTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  replies   Reply[]
}

model Tag {
  id       String    @id @default(cuid())
  title    String    @unique
  comments Comment[] @relation("DiaryTags")
  posts    Post[]    @relation("PostTags")
  replies  Reply[]   @relation("ReplyTags")
}

model Follows {
  follower   User   @relation("followers", fields: [followerid], references: [id])
  followerid String

  following   User   @relation("following", fields: [followingid], references: [id])
  followingid String

  @@id([followerid, followingid])
}

model Reply {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  content   String
  imageUrl  String?
  date      DateTime
  public    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]    @relation("ReplyTags")
}
